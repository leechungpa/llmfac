{"subject": "college_computer_science", "category": "STEM", "question": "Any set of Boolean operators that is sufficient to represent all Boolean expressions is said to be complete. Which of the following is NOT complete?", "choices": ["{AND, NOT}", "{NOT, OR}", "{AND, OR}", "{NAND}"], "answer_idx": "C", "A": "{AND, NOT}", "B": "{NOT, OR}", "C": "{AND, OR}", "D": "{NAND}", "answer": "Let's analyze the question step by step:\n\n1. The question asks about completeness of sets of Boolean operators.\n2. A set of Boolean operators is considered **complete** if all Boolean expressions can be constructed using operators only from that set.\n3. Commonly known facts in Boolean algebra are:\n   - {AND, NOT} is complete because you can express OR using De Morgan's laws.\n   - {NOT, OR} is also complete because you can express AND using De Morgan's laws.\n   - {NAND} alone is complete because NAND is a universal gate; you can construct AND, OR, and NOT from NAND.\n4. {AND, OR} alone is **not complete** because without NOT, you cannot express negation, and negation is essential to express all Boolean functions.\n\nTherefore, the set that is NOT complete is {AND, OR}.\n\nAnswer: C"}
{"subject": "college_computer_science", "category": "STEM", "question": "Let G = (V, E) be a connected, undirected graph, and let a and b be two distinct vertices in V. Let P_1 be the problem of finding a shortest simple path between a and b, and let P_2 be the problem of finding a longest simple path between a and b. Which of the following statements about P_1 and P_2 is true?", "choices": ["Both P_1 and P_2 can be solved in polynomial time.", "P_1 can be solved in polynomial time but P_2 is not known to be solvable in polynomial time.", "P_1 is not known to be solvable in polynomial time but P_2 can be solved in polynomial time.", "It is not known whether either P_1 or P_2 can be solved in polynomial time."], "answer_idx": "B", "A": "Both P_1 and P_2 can be solved in polynomial time.", "B": "P_1 can be solved in polynomial time but P_2 is not known to be solvable in polynomial time.", "C": "P_1 is not known to be solvable in polynomial time but P_2 can be solved in polynomial time.", "D": "It is not known whether either P_1 or P_2 can be solved in polynomial time.", "answer": "Let's analyze the problems and the complexity of finding shortest and longest simple paths in a connected, undirected graph.\n\n1. **Problem P_1: Finding a shortest simple path between two vertices a and b**\n   - A shortest simple path is the path with the minimum number of edges or minimum sum of edge weights (if weighted).\n   - This is a classic problem solved by algorithms like Breadth-First Search (BFS) for unweighted graphs or Dijkstra's algorithm for weighted graphs (with non-negative weights).\n   - Both BFS and Dijkstra run in polynomial time.\n   - Therefore, P_1 can be solved in polynomial time.\n\n2. **Problem P_2: Finding a longest simple path between two vertices a and b**\n   - A longest simple path is the path with the maximum number of edges without repeating vertices.\n   - This problem is known to be NP-hard in general graphs.\n   - It is related to the Hamiltonian path problem (a path visiting all vertices exactly once), which is NP-complete.\n   - There is no known polynomial-time algorithm that solves this problem in the general case.\n   - Therefore, P_2 is not known to be solvable in polynomial time.\n\nBased on this reasoning:\n\n- P_1 is solvable in polynomial time.\n- P_2 is not known to be solvable in polynomial time (and is believed to be hard).\n\nHence, the correct answer is:\n\nAnswer: B"}
